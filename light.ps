////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float4 pointLightColor1;
	float4 pointLight1;
	float4 pointLightColor2;
	float4 pointLight2;
	float4 pointLightColor3;
	float4 pointLight3;
	float4 spotLightColor;
	float4 spotLightDirection;
	float4 spotLight;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 wposition : TEXCOORD2;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;
	float3 reflection;
    float4 specular;

	textureColor = shaderTexture.Sample(SampleType, input.tex);

	color = ambientColor;
	
	lightDir = -lightDirection;
	lightDir = normalize(lightDir);

    lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
    {
        color += (diffuseColor * lightIntensity);
		color = saturate(color);

		reflection = normalize(reflect(-lightDir, input.normal));
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    color = color*textureColor;
	color = saturate(color + specular * specularColor);

	float3 wptol1 = pointLight1.xyz - input.wposition;
	float3 wptol2 = pointLight2.xyz - input.wposition;
	float3 wptol3 = pointLight3.xyz - input.wposition;

	float distance1 = length(wptol1);
	float distance2 = length(wptol2);
	float distance3 = length(wptol3);
	
	wptol1 = normalize(wptol1);
	wptol2 = normalize(wptol2);
	wptol3 = normalize(wptol3);
	
	float PointLightIntensity1 = saturate(dot(input.normal, wptol1));
	float PointLightIntensity2 = saturate(dot(input.normal, wptol2));
	float PointLightIntensity3 = saturate(dot(input.normal, wptol3));

	PointLightIntensity1/=(1.0f + 0.5f*distance1 + 0.05f*distance1*distance1);
	PointLightIntensity2/=(1.0f + 0.5f*distance2 + 0.05f*distance2*distance2);
	PointLightIntensity3/=(1.0f + 0.5f*distance3 + 0.05f*distance3*distance3);

	color = saturate(color + pointLightColor1*PointLightIntensity1 + pointLightColor2*PointLightIntensity2 + 
	pointLightColor3*PointLightIntensity3);

    return color;
}